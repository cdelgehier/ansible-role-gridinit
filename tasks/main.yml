---
# tasks file for ansible-role-gridinit

- name: Include OS variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags:
    - install
    - configure

- name: Install packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ openio_gridinit_packages }}"
  tags: install
  ignore_errors: "{{ ansible_check_mode }}"
  register: install_packages
  until: install_packages is success
  retries: 5
  delay: 2

- name: Ensure directories exists
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ openio_gridinit_conf_confd }}"
    - "{{ openio_gridinit_rundir }}"
  tags: configure

- name: Ensure sub-directory for namespace exists
  file:
    path: "{{ openio_gridinit_conf_confd }}/{{ item }}"
    state: directory
    mode: 0755
  with_items: "{{ openio_gridinit_services | map(attribute='namespace') | list }}"
  when: openio_gridinit_per_ns | bool
  tags: configure

- name: Add gridinit global configuration file
  template:
    src: gridinit.conf.j2
    dest: "{{ openio_gridinit_config_file }}"
  tags: configure
  register: _add_conf_global

- name: Add gridinit per-service configuration file
  template:
    src: gridinit-service.j2
    dest: "{{ openio_gridinit_conf_confd + '/' + item.namespace + '/' + item.name + '.conf'
if openio_gridinit_per_ns else openio_gridinit_conf_confd + '/' + item.namespace + '-' + item.name + '.conf' }}"
  with_items: "{{ openio_gridinit_services }}"
  when: (item.state | default('present')) == 'present'
  tags: configure
  register: _add_conf_per_service

- name: Remove gridinit per-service configuration file
  file:
    path: "{{ openio_gridinit_conf_confd + '/' + item.namespace + '/' + item.name + '.conf'
if openio_gridinit_per_ns else openio_gridinit_conf_confd + '/' + item.namespace + '-' + item.name + '.conf' }}"
    state: absent
  with_items: "{{ openio_gridinit_services }}"
  when: (item.state | default('present')) == 'absent'
  tags: configure
  register: _remove_conf_per_service

- name: Reload gridinit
  service:
    name: gridinit
    state: reloaded
    enabled: "{{ openio_gridinit_enabled }}"
  when:
    - not openio_gridinit_provision_only
    - _add_conf_global is changed or _add_conf_per_service is changed or _remove_conf_per_service is changed
  ignore_errors: "{{ ansible_check_mode }}"
  tags: configure

- block:
    - name: Ensure service is started
      service:
        name: "{{ openio_gridinit_service_name }}"
        state: started
        enabled: "{{ openio_gridinit_enabled }}"
      when: not openio_gridinit_provision_only
      tags: configure

    - name: check gridinit
      command: gridinit_cmd status
      register: _gridinit_check
      retries: 3
      delay: 5
      until: _gridinit_check is success
      changed_when: false
      tags: configure
      failed_when:
        - "'Connection refused' in _gridinit_check.stdout"
  when: openio_bootstrap | d(false)
...
